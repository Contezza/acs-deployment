# Defines the deployment for the Alfresco Search (Solr) App
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "alfresco-search.fullName" . }}-solr
  labels:
    app: {{ template "alfresco-search.fullName" . }}-solr
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: search
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ template "alfresco-search.fullName" . }}-solr
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        app: {{ template "alfresco-search.fullName" . }}-solr
        release: {{ .Release.Name }}
    spec:
    {{- include "component-pod-security-context" .Values | indent 4 }}
    {{- with .Values.affinity }}
      affinity:
{{ tpl . $ | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- if .Values.nodeSelector }}
      nodeSelector: {{- .Values.nodeSelector | toYaml | nindent 8 }}
    {{- end }}
      {{- include "alfresco-content-services.imagePullSecrets" . | nindent 6 }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ template "alfresco-search.dockerImage" . }}
          imagePullPolicy: {{ template "alfresco-search.pullPolicy" . }}
          {{- include "component-security-context" .Values | indent 8 }}
          env:
          {{- if and (.Values.global.elasticAPM) (.Values.global.elasticAPM.enabled) }}
          - name: ELASTIC_APM_SERVER_URLS
            value: {{ .Values.global.elasticAPM.containers.env.serverUrls }}
          - name: ELASTIC_APM_SERVICE_NAME
            value: "solr"
          - name: ELASTIC_APM_APPLICATION_PACKAGES
            value: com.alfresco,org.alfresco,nl.amsterdam,org.apache
          - name: ELASTIC_APM_ENVIRONMENT
            value: {{ .Values.global.elasticAPM.containers.env.environment }}
          - name: ELASTIC_APM_LOG_LEVEL
            value: {{ .Values.global.elasticAPM.containers.env.logLevel }}
          - name: ELASTIC_APM_INSTRUMENT_ANCIENT_BYTECODE
            value: "true"
          - name: ELASTIC_APM_SECRET_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.elasticAPM.containers.env.secretToken.name }}
                key: {{ .Values.global.elasticAPM.containers.env.secretToken.key }}
          - name: JAVA_TOOL_OPTIONS
            value: {{ .Values.global.elasticAPM.containers.env.javaToolOptions }}
          {{- end }}
          envFrom:
          - configMapRef:
              name: {{ template "alfresco-search.fullName" . }}-solr-configmap
          {{- if eq .Values.global.tracking.auth "secret" }}
          - secretRef:
              name: {{ template "alfresco-search.fullName" . }}-solr-jtoolopts
          {{- end }}
          ports:
            - containerPort: {{ template "alfresco-search.internalPort" . }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - name: data
            mountPath: {{ .Values.persistence.search.data.mountPath }}
            subPath: {{ .Values.persistence.search.data.subPath }}
          {{- if and (.Values.global.elasticAPM) (.Values.global.elasticAPM.enabled) }}
          - mountPath: {{ .Values.global.elasticAPM.containers.volumeMounts.mountPath }}
            name: {{ .Values.global.elasticAPM.containers.volumeMounts.name }}
          {{- end }}
          readinessProbe:
            httpGet:
              path: /solr/alfresco/admin/ping
              port: {{ template "alfresco-search.internalPort" . }}
              {{- if eq .Values.global.tracking.auth "secret" }}
              httpHeaders:
              - name: X-Alfresco-Search-Secret
                value: "{{ .Values.global.tracking.sharedsecret }}"
              {{- end }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          livenessProbe:
            httpGet:
              path: /solr/admin/info/system
              port: {{ template "alfresco-search.internalPort" . }}
              {{- if eq .Values.global.tracking.auth "secret" }}
              httpHeaders:
              - name: X-Alfresco-Search-Secret
                value: "{{ .Values.global.tracking.sharedsecret }}"
              {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: 1
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          # sleep to drain any existing connections
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "sleep 10"]
      initContainers:
        {{- if and (.Values.global.elasticAPM) (.Values.global.elasticAPM.enabled) }}
        - name: elastic-java-agent
          image: {{ .Values.global.elasticAPM.initContainers.image }}
          volumeMounts:
          - mountPath: {{ .Values.global.elasticAPM.initContainers.volumeMounts.mountPath }}
            name: {{ .Values.global.elasticAPM.initContainers.volumeMounts.name }}
          command: ['cp', '-v', '/usr/agent/elastic-apm-agent.jar', '/elastic/apm/agent']
        {{- end }}
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: |-
            {{ .Values.persistence.existingClaim | default (printf "%s-solr-claim" (include "alfresco-search.fullName" .)) }}
      {{- if and (.Values.global.elasticAPM) (.Values.global.elasticAPM.enabled) }}
      - name: elastic-apm-agent
        emptyDir: {}
      {{- end }}
